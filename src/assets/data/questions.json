[{"id":1,"title":"1. What's the output?","text":null,"code":"function sayHi() {\n  console.log(name);\n  console.log(age);\n  var name = \"Lydia\";\n  let age = 21;\n}\n\nsayHi();","choices":["A: Lydia and undefined","B: Lydia and ReferenceError","C: ReferenceError and 21","D: undefined and ReferenceError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: D</h4>\n<p>Within the function, we first declare the <code>name</code> variable with the <code>var</code> keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of <code>undefined</code>, until we actually get to the line where we define the variable. We haven't defined the variable yet on the line where we try to log the <code>name</code> variable, so it still holds the value of <code>undefined</code>.</p>\n<p>Variables with the <code>let</code> keyword (and <code>const</code>) are hoisted, but unlike <code>var</code>, don't get <i>initialized</i>. They are not accessible before the line we declare (initialize) them. This is called the \"temporal dead zone\". When we try to access the variables before they are declared, JavaScript throws a <code>ReferenceError</code>.</p>\n<p></p>\n"},{"id":2,"title":"2. What's the output?","text":null,"code":"for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}\n\nfor (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 1);\n}","choices":["A: 0 1 2 and 0 1 2","B: 0 1 2 and 3 3 3","C: 3 3 3 and 0 1 2"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>Because of the event queue in JavaScript, the <code>setTimeout</code> function is called <em>after</em> the loop has been executed. Since the variable <code>i</code> in the first loop was declared using the <code>var</code> keyword, this value was global. During the loop, we incremented the value of <code>i</code> by <code>1</code> each time, using the unary operator <code>++</code>. By the time the <code>setTimeout</code> function was invoked, <code>i</code> was equal to <code>3</code> in the first example.</p>\n<p>In the second loop, the variable <code>i</code> was declared using the <code>let</code> keyword: variables declared with the <code>let</code> (and <code>const</code>) keyword are block-scoped (a block is anything between <code>{ }</code>). During each iteration, <code>i</code> will have a new value, and each value is scoped inside the loop.</p>\n<p></p>\n"},{"id":3,"title":"3. What's the output?","text":null,"code":"const shape = {\n  radius: 10,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () => 2 * Math.PI * this.radius\n};\n\nshape.diameter();\nshape.perimeter();","choices":["A: 20 and 62.83185307179586","B: 20 and NaN","C: 20 and 63","D: NaN and 63"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>Note that the value of <code>diameter</code> is a regular function, whereas the value of <code>perimeter</code> is an arrow function.</p>\n<p>With arrow functions, the <code>this</code> keyword refers to its current surrounding scope, unlike regular functions! This means that when we call <code>perimeter</code>, it doesn't refer to the shape object, but to its surrounding scope (window for example).</p>\n<p>There is no value <code>radius</code> on that object, which returns <code>undefined</code>.</p>\n<p></p>\n"},{"id":4,"title":"4. What's the output?","text":null,"code":"+true;\n!\"Lydia\";","choices":["A: 1 and false","B: false and NaN","C: false and false"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>The unary plus tries to convert an operand to a number. <code>true</code> is <code>1</code>, and <code>false</code> is <code>0</code>.</p>\n<p>The string <code>'Lydia'</code> is a truthy value. What we're actually asking, is \"is this truthy value falsy?\". This returns <code>false</code>.</p>\n<p></p>\n"},{"id":5,"title":"5. Which one is NOT valid?","text":null,"code":"const bird = {\n  size: \"small\"\n};\n\nconst mouse = {\n  name: \"Mickey\",\n  small: true\n};","choices":["A: mouse.bird.size","B: mouse[bird.size]","C: mouse[bird[\"size\"]]","D: All of them are valid"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not <em>type</em> them as strings, they are always converted into strings under the hood.</p>\n<p>JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket <code>[</code> and keeps going until it finds the closing bracket <code>]</code>. Only then, it will evaluate the statement.</p>\n<p><code>mouse[bird.size]</code>: First it evaluates <code>bird.size</code>, which is <code>\"small\"</code>. <code>mouse[\"small\"]</code> returns <code>true</code></p>\n<p>However, with dot notation, this doesn't happen. <code>mouse</code> does not have a key called <code>bird</code>, which means that <code>mouse.bird</code> is <code>undefined</code>. Then, we ask for the <code>size</code> using dot notation: <code>mouse.bird.size</code>. Since <code>mouse.bird</code> is <code>undefined</code>, we're actually asking <code>undefined.size</code>. This isn't valid, and will throw an error similar to <code>Cannot read property \"size\" of undefined</code>.</p>\n<p></p>\n"},{"id":6,"title":"6. What's the output?","text":null,"code":"let c = { greeting: \"Hey!\" };\nlet d;\n\nd = c;\nc.greeting = \"Hello\";\nconsole.log(d.greeting);","choices":["A: Hello","B: undefined","C: ReferenceError","D: TypeError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>In JavaScript, all objects interact by <em>reference</em> when setting them equal to each other.</p>\n<p>First, variable <code>c</code> holds a value to an object. Later, we assign <code>d</code> with the same reference that <code>c</code> has to the object.</p>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/bd30403debc9a753512d0097f47958808974525c/68747470733a2f2f692e696d6775722e636f6d2f6b6f356b3066732e706e67\"><img src=\"https://camo.githubusercontent.com/bd30403debc9a753512d0097f47958808974525c/68747470733a2f2f692e696d6775722e636f6d2f6b6f356b3066732e706e67\" width=\"200\" data-canonical-src=\"https://i.imgur.com/ko5k0fs.png\" style=\"max-width:100%;\"></a>\n<p>When you change one object, you change all of them.</p>\n<p></p>\n"},{"id":7,"title":"7. What's the output?","text":null,"code":"let a = 3;\nlet b = new Number(3);\nlet c = 3;\n\nconsole.log(a == b);\nconsole.log(a === b);\nconsole.log(b === c);","choices":["A: true false true","B: false false true","C: true false false","D: false true true"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p><code>new Number()</code> is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.</p>\n<p>When we use the <code>==</code> operator, it only checks whether it has the same <em>value</em>. They do they both have the value of <code>3</code>, so it returns <code>true</code>.</p>\n<p>However, when we use the <code>===</code> operator, both value <em>and</em> type should be the same. It's not: <code>new Number()</code> is not a number, it's an <strong>object</strong>. Both return <code>false.</code></p>\n<p></p>\n"},{"id":8,"title":"8. What's the output?","text":null,"code":"class Chameleon {\n  static colorChange(newColor) {\n    this.newColor = newColor;\n    return this.newColor;\n  }\n\n  constructor({ newColor = \"green\" } = {}) {\n    this.newColor = newColor;\n  }\n}\n\nconst freddie = new Chameleon({ newColor: \"purple\" });\nfreddie.colorChange(\"orange\");","choices":["A: orange","B: purple","C: green","D: TypeError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: D</h4>\n<p>The <code>colorChange</code> function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children. Since <code>freddie</code> is a child, the function is not passed down, and not available on the <code>freddie</code> instance: a <code>TypeError</code> is thrown.</p>\n<p></p>\n"},{"id":9,"title":"9. What's the output?","text":null,"code":"let greeting;\ngreetign = {}; // Typo!\nconsole.log(greetign);","choices":["A: {}","B: ReferenceError: greetign is not defined","C: undefined"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>It logs the object, because we just created an empty object on the global object! When we mistyped <code>greeting</code> as <code>greetign</code>, the JS interpreter actually saw this as <code>global.greetign = {}</code> (or <code>window.greetign = {}</code> in a browser).</p>\n<p>In order to avoid this, we can use <code>\"use strict\"</code>. This makes sure that you have declared a variable before setting it equal to anything.</p>\n<p></p>\n"},{"id":10,"title":"10. What happens when we do this?","text":null,"code":"function bark() {\n  console.log(\"Woof!\");\n}\n\nbark.animal = \"dog\";","choices":["A: Nothing, this is totally fine!","B: SyntaxError. You cannot add properties to a function this way.","C: undefined","D: ReferenceError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)</p>\n<p>A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable.</p>\n<p></p>\n"},{"id":11,"title":"11. What's the output?","text":null,"code":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst member = new Person(\"Lydia\", \"Hallie\");\nPerson.getFullName = function () {\n  return `${this.firstName} ${this.lastName}`;\n}\n\nconsole.log(member.getFullName());","choices":["A: TypeError","B: SyntaxError","C: Lydia Hallie","D: undefined undefined"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>You can't add properties to a constructor like you can with regular objects. If you want to add a feature to all objects at once, you have to use the prototype instead. So in this case,</p>\n<div class=\"highlight highlight-source-js\"><pre><span class=\"pl-smi\">Person</span>.<span class=\"pl-c1\">prototype</span>.<span class=\"pl-en\">getFullName</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">function</span> () {\n  <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">firstName</span><span class=\"pl-pse\">}</span></span> <span class=\"pl-s1\"><span class=\"pl-pse\">${</span><span class=\"pl-c1\">this</span>.<span class=\"pl-smi\">lastName</span><span class=\"pl-pse\">}</span></span><span class=\"pl-pds\">`</span></span>;\n}</pre></div>\n<p>would have made <code>member.getFullName()</code> work. Why is this beneficial? Say that we added this method to the constructor itself. Maybe not every <code>Person</code> instance needed this method. This would waste a lot of memory space, since they would still have that property, which takes of memory space for each instance. Instead, if we only add it to the prototype, we just have it at one spot in memory, yet they all have access to it!</p>\n<p></p>\n"},{"id":12,"title":"12. What's the output?","text":null,"code":"function Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n\nconst lydia = new Person(\"Lydia\", \"Hallie\");\nconst sarah = Person(\"Sarah\", \"Smith\");\n\nconsole.log(lydia);\nconsole.log(sarah);","choices":["A: Person {firstName: \"Lydia\", lastName: \"Hallie\"} and undefined","B: Person {firstName: \"Lydia\", lastName: \"Hallie\"} and Person {firstName: \"Sarah\", lastName: \"Smith\"}","C: Person {firstName: \"Lydia\", lastName: \"Hallie\"} and {}","D:Person {firstName: \"Lydia\", lastName: \"Hallie\"} and ReferenceError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>For <code>sarah</code>, we didn't use the <code>new</code> keyword. When using <code>new</code>, it refers to the new empty object we create. However, if you don't add <code>new</code> it refers to the <strong>global object</strong>!</p>\n<p>We said that <code>this.firstName</code> equals <code>\"Sarah\"</code> and <code>this.lastName</code> equals <code>\"Smith\"</code>. What we actually did, is defining <code>global.firstName = 'Sarah'</code> and <code>global.lastName = 'Smith'</code>. <code>sarah</code> itself is left <code>undefined</code>.</p>\n<p></p>\n"},{"id":13,"title":"13. What are the three phases of event propagation?","text":null,"code":"function sum(a, b) {\n  return a + b;\n}\n\nsum(1, \"2\");","choices":["A: Target > Capturing > Bubbling","B: Bubbling > Target > Capturing","C: Target > Bubbling > Capturing","D: Capturing > Target > Bubbling"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: D</h4>\n<p>During the <strong>capturing</strong> phase, the event goes through the ancestor elements down to the target element. It then reaches the <strong>target</strong> element, and <strong>bubbling</strong> begins.</p>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/1e3f6d3b059bbfcacaf2e694a46c5b81cae333f4/68747470733a2f2f692e696d6775722e636f6d2f4e31386f5267642e706e67\"><img src=\"https://camo.githubusercontent.com/1e3f6d3b059bbfcacaf2e694a46c5b81cae333f4/68747470733a2f2f692e696d6775722e636f6d2f4e31386f5267642e706e67\" width=\"200\" data-canonical-src=\"https://i.imgur.com/N18oRgd.png\" style=\"max-width:100%;\"></a>\n<p></p>\n"},{"id":14,"title":"14. All object have prototypes.","text":null,"code":"function sum(a, b) {\n  return a + b;\n}\n\nsum(1, \"2\");","choices":["A: true","B: false"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-1\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-1\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>All objects have prototypes, except for the <strong>base object</strong>. The base object has access to some methods and properties, such as <code>.toString</code>. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you.</p>\n<p></p>\n"},{"id":15,"title":"15. What's the output?","text":null,"code":"function sum(a, b) {\n  return a + b;\n}\n\nsum(1, \"2\");","choices":["A: NaN","B: TypeError","C: \"12\"","D: 3"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>JavaScript is a <strong>dynamimcally typed language</strong>: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called <em>implicit type coercion</em>. <strong>Coercion</strong> is converting from one type into another.</p>\n<p>In this example, JavaScript converts the number <code>1</code> into a string, in order for the function to make sense and return a value. During the addition of a numeric type (<code>1</code>) and a string type (<code>'2'</code>), the number is treated as a string. We can concatenate strings like <code>\"Hello\" + \"World\"</code>, so what's happening here is <code>\"1\" + \"2\"</code> which returns <code>\"12\"</code>.</p>\n<p></p>\n"},{"id":16,"title":"16. What's the output?","text":null,"code":"let number = 0;\nconsole.log(number++);\nconsole.log(++number);\nconsole.log(number);","choices":["A: 1 1 2","B: 1 2 2","C: 0 2 2","D: 0 1 2"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>The <strong>postfix</strong> unary operator <code>++</code>:</p>\n<ol>\n<li>Returns the value (this returns <code>0</code>)</li>\n<li>Increments the value (number is now <code>1</code>)</li>\n</ol>\n<p>The <strong>prefix</strong> unary operator <code>++</code>:</p>\n<ol>\n<li>Increments the value (number is now <code>2</code>)</li>\n<li>Returns the value (this returns <code>2</code>)</li>\n</ol>\n<p>This returns <code>0 2 2</code>.</p>\n<p></p>\n"},{"id":17,"title":"17. What's the output?","text":null,"code":"function getPersonInfo(one, two, three) {\n  console.log(one);\n  console.log(two);\n  console.log(three);\n}\n\nconst person = \"Lydia\";\nconst age = 21;\n\ngetPersonInfo`${person} is ${age} years old`;","choices":["A: \"Lydia\" 21 [\"\", \" is \", \" years old\"]","B: [\"\", \" is \", \" years old\"] \"Lydia\" 21","C: \"Lydia\" [\"\", \" is \", \" years old\"] 21"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-2\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-2\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions!</p>\n<p></p>\n"},{"id":18,"title":"18. What's the output?","text":null,"code":"function checkAge(data) {\n  if (data === { age: 18 }) {\n    console.log(\"You are an adult!\");\n  } else if (data == { age: 18 }) {\n    console.log(\"You are still an adult.\");\n  } else {\n    console.log(`Hmm.. You don't have an age I guess`);\n  }\n}\n\ncheckAge({ age: 18 });","choices":["A: You are an adult!","B: You are still an adult.","C: Hmm.. You don't have an age I guess"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>When testing equality, primitives are compared by their <em>value</em>, while objects are compared by their <em>reference</em>. JavaScript checks if the objects have a reference to the same location in memory.</p>\n<p>The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.</p>\n<p>This is why both <code>{ age: 18 } === { age: 18 }</code> and <code>{ age: 18 } == { age: 18 }</code> return <code>false</code>.</p>\n<p></p>\n"},{"id":19,"title":"19. What's the output?","text":null,"code":"function getAge(...args) {\n  console.log(typeof args);\n}\n\ngetAge(21);","choices":["A: \"number\"","B: \"array\"","C: \"object\"","D: \"NaN\""],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>The spread operator (<code>...args</code>.) returns an array with arguments. An array is an object, so <code>typeof args</code> returns <code>\"object\"</code></p>\n<p></p>\n"},{"id":20,"title":"20. What's the output?","text":null,"code":"function getAge() {\n  \"use strict\";\n  age = 21;\n  console.log(age);\n}\n\ngetAge();","choices":["A: 21","B: undefined","C: ReferenceError","D: TypeError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>With <code>\"use strict\"</code>, you can make sure that you don't accidentally declare global variables. We never declared the variable <code>age</code>, and since we use <code>\"use strict\"</code>, it will throw a reference error. If we didn't use <code>\"use strict\"</code>, it would have worked, since the property <code>age</code> would have gotten added to the global object.</p>\n<p></p>\n"},{"id":21,"title":"21. What's the output?","text":null,"code":"const sum = eval(\"10*10+5\");","choices":["A: 105","B: \"105\"","C: TypeError","D: \"10*10+5\""],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p><code>eval</code> evaluates codes that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is <code>10 * 10 + 5</code>. This returns the number <code>105</code>.</p>\n<p></p>\n"},{"id":22,"title":"22. How long is cool_secret accessible?","text":null,"code":"sessionStorage.setItem(\"cool_secret\", 123);","choices":["A: Forever, the data doesn't get lost.","B: When the user closes the tab.","C: When the user closes the entire browser, not only the tab.","D: When the user shuts off their computer."],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>The data stored in <code>sessionStorage</code> is removed after closing the <em>tab</em>.</p>\n<p>If you used <code>localStorage</code>, the data would've been there forever, unless for example <code>localStorage.clear()</code> is invoked.</p>\n<p></p>\n"},{"id":23,"title":"23. What's the output?","text":null,"code":"var num = 8;\nvar num = 10;\n\nconsole.log(num);","choices":["A: 8","B: 10","C: SyntaxError","D: ReferenceError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-4\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-4\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>With the <code>var</code> keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.</p>\n<p>You cannot do this with <code>let</code> or <code>const</code> since they're block-scoped.</p>\n<p></p>\n"},{"id":24,"title":"24. What's the output?","text":null,"code":"const obj = { 1: \"a\", 2: \"b\", 3: \"c\" };\nconst set = new Set([1, 2, 3, 4, 5]);\n\nobj.hasOwnProperty(\"1\");\nobj.hasOwnProperty(1);\nset.has(\"1\");\nset.has(1);","choices":["A: false true false true","B: false true true true","C: true true false true","D: true true true true"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. This is why <code>obj.hasOwnProperty('1')</code> also returns true.</p>\n<p>It doesn't work that way for a set. There is no <code>'1'</code> in our set: <code>set.has('1')</code> returns <code>false</code>. It has the numeric type <code>1</code>, <code>set.has(1)</code> returns <code>true</code>.</p>\n<p></p>\n"},{"id":25,"title":"25. What's the output?","text":null,"code":"const obj = { a: \"one\", b: \"two\", a: \"three\" };\nconsole.log(obj);","choices":["A: { a: \"one\", b: \"two\" }","B: { b: \"two\", a: \"three\" }","C: { a: \"three\", b: \"two\" }","D: SyntaxError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.</p>\n<p></p>\n"},{"id":26,"title":"26. The JavaScript global execution context creates two things for you: the global object, and the \"this\" keyword.","text":null,"code":"for (let i = 1; i < 5; i++) {\n  if (i === 3) continue;\n  console.log(i);\n}","choices":["A: true","B: false","C: it depends"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>The base execution context is the global execution context: it's what's accessible everywhere in your code.</p>\n<p></p>\n"},{"id":27,"title":"27. What's the output?","text":null,"code":"for (let i = 1; i < 5; i++) {\n  if (i === 3) continue;\n  console.log(i);\n}","choices":["A: 1 2","B: 1 2 3","C: 1 2 4","D: 1 3 4"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>The <code>continue</code> statement skips an iteration if a certain condition returns <code>true</code>.</p>\n<p></p>\n"},{"id":28,"title":"28. What's the output?","text":null,"code":"String.prototype.giveLydiaPizza = () => {\n  return \"Just give Lydia pizza already!\";\n};\n\nconst name = \"Lydia\";\n\nname.giveLydiaPizza();","choices":["A: \"Just give Lydia pizza already!\"","B: TypeError: not a function","C: SyntaxError","D: undefined"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p><code>String</code> is a built-in constructor, which we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!</p>\n<p></p>\n"},{"id":29,"title":"29. What's the output?","text":null,"code":"const a = {};\nconst b = { key: \"b\" };\nconst c = { key: \"c\" };\n\na[b] = 123;\na[c] = 456;\n\nconsole.log(a[b]);","choices":["A: 123","B: 456","C: undefined","D: ReferenceError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-5\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-5\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>Object keys are automatically converted into strings. We are trying to set an object as a key to object <code>a</code>, with the value of <code>123</code>.</p>\n<p>However, when we stringify an object, it becomes <code>\"[Object object]\"</code>. So what we are saying here, is that <code>a[\"Object object\"] = 123</code>. Then, we can try to do the same again. <code>c</code> is another object that we are implicitly stringifying. So then, <code>a[\"Object object\"] = 456</code>.</p>\n<p>Then, we log <code>a[b]</code>, which is actually <code>a[\"Object object\"]</code>. We just set that to <code>456</code>, so it returns <code>456</code>.</p>\n<p></p>\n"},{"id":30,"title":"30. What's the output?","text":null,"code":"const foo = () => console.log(\"First\");\nconst bar = () => setTimeout(() => console.log(\"Second\"));\nconst baz = () => console.log(\"Third\");\n\nbar();\nfoo();\nbaz();","choices":["A: First Second Third","B: First Third Second","C: Second First Third","D: Second Third First"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-6\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-6\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>We have a <code>setTimeout</code> function and invoked it first. Yet, it was logged last.</p>\n<p>This is because in browsers, we don't just have the runtime engine, we also have something called a <code>WebAPI</code>. The <code>WebAPI</code> gives us the <code>setTimeout</code> function to start with, and for example the DOM.</p>\n<p>After the <em>callback</em> is pushed to the WebAPI, the <code>setTimeout</code> function itself (but not the callback!) is popped off the stack.</p>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/335a3d02ffb7f822628886c480a9584ace2ff931/68747470733a2f2f692e696d6775722e636f6d2f58357773484f672e706e67\"><img src=\"https://camo.githubusercontent.com/335a3d02ffb7f822628886c480a9584ace2ff931/68747470733a2f2f692e696d6775722e636f6d2f58357773484f672e706e67\" width=\"200\" data-canonical-src=\"https://i.imgur.com/X5wsHOg.png\" style=\"max-width:100%;\"></a>\n<p>Now, <code>foo</code> gets invoked, and <code>\"First\"</code> is being logged.</p>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/cf5f8bd460361ccee8bd2534026adbb22e2596e5/68747470733a2f2f692e696d6775722e636f6d2f507663306447712e706e67\"><img src=\"https://camo.githubusercontent.com/cf5f8bd460361ccee8bd2534026adbb22e2596e5/68747470733a2f2f692e696d6775722e636f6d2f507663306447712e706e67\" width=\"200\" data-canonical-src=\"https://i.imgur.com/Pvc0dGq.png\" style=\"max-width:100%;\"></a>\n<p><code>foo</code> is popped off the stack, and <code>baz</code> gets invoked. <code>\"Third\"</code> gets logged.</p>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/1b97d5c5a796735746aafd7dc0119c236863eb57/68747470733a2f2f692e696d6775722e636f6d2f576841326243502e706e67\"><img src=\"https://camo.githubusercontent.com/1b97d5c5a796735746aafd7dc0119c236863eb57/68747470733a2f2f692e696d6775722e636f6d2f576841326243502e706e67\" width=\"200\" data-canonical-src=\"https://i.imgur.com/WhA2bCP.png\" style=\"max-width:100%;\"></a>\n<p>The WebAPI can't just add stuff to the stack whenever it's ready. Instead, it pushes the callback function to something called the <em>queue</em>.</p>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/030dfcad68efec405301a5870e217fb374069645/68747470733a2f2f692e696d6775722e636f6d2f4e536e445a6d552e706e67\"><img src=\"https://camo.githubusercontent.com/030dfcad68efec405301a5870e217fb374069645/68747470733a2f2f692e696d6775722e636f6d2f4e536e445a6d552e706e67\" width=\"200\" data-canonical-src=\"https://i.imgur.com/NSnDZmU.png\" style=\"max-width:100%;\"></a>\n<p>This is where an event loop starts to work. An <strong>event loop</strong> looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.</p>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/8371c584d1456dea5fbe13c8c0554d75e147ea6b/68747470733a2f2f692e696d6775722e636f6d2f757969536341492e706e67\"><img src=\"https://camo.githubusercontent.com/8371c584d1456dea5fbe13c8c0554d75e147ea6b/68747470733a2f2f692e696d6775722e636f6d2f757969536341492e706e67\" width=\"200\" data-canonical-src=\"https://i.imgur.com/uyiScAI.png\" style=\"max-width:100%;\"></a>\n<p><code>bar</code> gets invoked, <code>\"Second\"</code> gets logged, and it's popped off the stack.</p>\n<p></p>\n"},{"id":31,"title":"31. What is the event.target when clicking the button?","text":null,"code":"const person = { name: \"Lydia\" };\n\nfunction sayHi(age) {\n  console.log(`${this.name} is ${age}`);\n}\n\nsayHi.call(person, 21);\nsayHi.bind(person, 21);","choices":["A: Outer div","B: Inner div","C: button","D: An array of all nested elements."],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>The deepest nested element that caused the event is the target of the event. You can stop bubbling by <code>event.stopPropagation</code></p>\n<p></p>\n"},{"id":32,"title":"32. When you click the paragraph, what's the logged output?","text":null,"code":"const person = { name: \"Lydia\" };\n\nfunction sayHi(age) {\n  console.log(`${this.name} is ${age}`);\n}\n\nsayHi.call(person, 21);\nsayHi.bind(person, 21);","choices":["A: p div","B: div p","C: p","D: div"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-10\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-10\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>If we click <code>p</code>, we see two logs: <code>p</code> and <code>div</code>. During event propagation, there are 3 phases: capturing, target, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set <code>useCapture</code> to <code>true</code>). It goes from the deepest nested element outwards.</p>\n<p></p>\n"},{"id":33,"title":"33. What's the output?","text":null,"code":"const person = { name: \"Lydia\" };\n\nfunction sayHi(age) {\n  console.log(`${this.name} is ${age}`);\n}\n\nsayHi.call(person, 21);\nsayHi.bind(person, 21);","choices":["A: undefined is 21 Lydia is 21","B: function function","C: Lydia is 21 Lydia is 21","D: Lydia is 21 function"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-d-3\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-d-3\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: D</h4>\n<p>With both, we can pass the object to which we want the <code>this</code> keyword to refer to. However, <code>.call</code> is also <em>executed immediately</em>!</p>\n<p><code>.bind.</code> returns a <em>copy</em> of the function, but with a bound context! It is not executed immediately.</p>\n<p></p>\n"},{"id":34,"title":"34. What's the output?","text":null,"code":"function sayHi() {\n  return (() => 0)();\n}\n\ntypeof sayHi();","choices":["A: \"object\"","B: \"number\"","C: \"function\"","D: \"undefined\""],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-7\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-7\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p>The <code>sayHi</code> function returns the returned value of the immediately invoked function (IIFE). This function returned <code>0</code>, which is type <code>\"number\"</code>.</p>\n<p>FYI: there are only 7 built-in types: <code>null</code>, <code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>string</code>, <code>object</code>, and <code>symbol</code>. <code>\"function\"</code> is not a type, since functions are objects, it's of type <code>\"object\"</code>.</p>\n<p></p>\n"},{"id":35,"title":"35. Which of these values are falsy?","text":null,"code":"0;\nnew Number(0);\n(\"\");\n(\" \");\nnew Boolean(false);\nundefined;","choices":["A: 0, '', undefined","B: 0, new Number(0), '', new Boolean(false), undefined","C: 0, '', new Boolean(false), undefined","D: All of them are falsy"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>There are only six falsy values:</p>\n<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>NaN</code></li>\n<li><code>0</code></li>\n<li><code>''</code> (empty string)</li>\n<li><code>false</code></li>\n</ul>\n<p>Function constructors, like <code>new Number</code> and <code>new Boolean</code> are truthy.</p>\n<p></p>\n"},{"id":36,"title":"36. What's the output?","text":null,"code":"console.log(typeof typeof 1);","choices":["A: \"number\"","B: \"string\"","C: \"object\"","D: \"undefined\""],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-8\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-8\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p><code>typeof 1</code> returns <code>\"number\"</code>.\n<code>typeof \"number\"</code> returns <code>\"string\"</code></p>\n<p></p>\n"},{"id":37,"title":"37. What's the output?","text":null,"code":"const numbers = [1, 2, 3];\nnumbers[10] = 11;\nconsole.log(numbers);","choices":["A: [1, 2, 3, 7 x null, 11]","B: [1, 2, 3, 11]","C: [1, 2, 3, 7 x empty, 11]","D: SyntaxError"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-11\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-11\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p>When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called \"empty slots\". These actually have the value of <code>undefined</code>, but you will see something like:</p>\n<p><code>[1, 2, 3, 7 x empty, 11]</code></p>\n<p>depending on where you run it (it's different for every browser, node, etc.)</p>\n<p></p>\n"},{"id":38,"title":"38. What's the output?","text":null,"code":"(() => {\n  let x, y;\n  try {\n    throw new Error();\n  } catch (x) {\n    (x = 1), (y = 2);\n    console.log(x);\n  }\n  console.log(x);\n  console.log(y);\n})();","choices":["A: 1 undefined 2","B: undefined undefined undefined","C: 1 1 2","D: 1 undefined undefined"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-12\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-12\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>The <code>catch</code> block receives the argument <code>x</code>. This is not the same <code>x</code> as the variable when we pass arguments. This variable <code>x</code> is block-scoped.</p>\n<p>Later, we set this block-scoped variable equal to <code>1</code>, and set the value of the variable <code>y</code>. Now, we log the block-scoped variable <code>x</code>, which is equal to <code>1</code>.</p>\n<p>Outside of the <code>catch</code> block, <code>x</code> is still <code>undefined</code>, and <code>y</code> is <code>2</code>. When we want to <code>console.log(x)</code> outside of the <code>catch</code> block, it returns <code>undefined</code>, and <code>y</code> returns <code>2</code>.</p>\n<p></p>\n"},{"id":39,"title":"39. Everything in JavaScript is either a...","text":null,"code":"[[0, 1], [2, 3]].reduce(\n  (acc, cur) => {\n    return acc.concat(cur);\n  },\n  [1, 2]\n);","choices":["A: primitive or object","B: function or object","C: trick question! only objects","D: number or object"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-13\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-13\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>JavaScript only has primitive types and objects.</p>\n<p>Primitive types are <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, and <code>symbol</code>.</p>\n<p></p>\n"},{"id":40,"title":"40. What's the output?","text":null,"code":"[[0, 1], [2, 3]].reduce(\n  (acc, cur) => {\n    return acc.concat(cur);\n  },\n  [1, 2]\n);","choices":["A: [0, 1, 2, 3, 1, 2]","B: [6, 1, 2]","C: [1, 2, 0, 1, 2, 3]","D: [1, 2, 6]"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-c-12\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-c-12\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: C</h4>\n<p><code>[1, 2]</code> is our initial value. This is the value we start with, and the value of the very first <code>acc</code>. During the first round, <code>acc</code> is <code>[1,2]</code>, and <code>cur</code> is <code>[0, 1]</code>. We concatenate them, which results in <code>[1, 2, 0, 1]</code>.</p>\n<p>Then, <code>[1, 2, 0, 1]</code> is <code>acc</code> and <code>[2, 3]</code> is <code>cur</code>. We concatenate them, and get <code>[1, 2, 0, 1, 2, 3]</code></p>\n<p></p>\n"},{"id":41,"title":"41. What's the output?","text":null,"code":"!!null;\n!!\"\";\n!!1;","choices":["A: false true false","B: false false true","C: false true true","D: true true false"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-b-9\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-b-9\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: B</h4>\n<p><code>null</code> is falsy. <code>!null</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p>\n<p><code>\"\"</code> is falsy. <code>!\"\"</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p>\n<p><code>1</code> is truthy. <code>!1</code> returns <code>false</code>. <code>!false</code> returns <code>true</code>.</p>\n<p></p>\n"},{"id":42,"title":"42. What does the setInterval method return?","text":null,"code":"setInterval(() => console.log(\"Hi\"), 1000);","choices":["A: a unique id","B: the amount of milliseconds specified","C: the passed function","D: undefined"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-14\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-14\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>It returns a unique id. This id can be used to clear that interval with the <code>clearInterval()</code> function.</p>\n<p></p>\n"},{"id":43,"title":"43. What does this return?","text":null,"code":"[...\"Lydia\"];","choices":["A: [\"L\", \"y\", \"d\", \"i\", \"a\"]","B: [\"Lydia\"]","C: [[], \"Lydia\"]","D: [[\"L\", \"y\", \"d\", \"i\", \"a\"]]"],"answer":"<summary><b>Answer</b></summary>\n<p>\n</p><h4><a id=\"user-content-answer-a-15\" class=\"anchor\" aria-hidden=\"true\" href=\"#answer-a-15\"><svg class=\"octicon octicon-link\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer: A</h4>\n<p>A string is an iterable. The spread operator maps every character of an iterable to one element.</p>\n<p></p>\n"}]